package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Position;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.domain.TraderAccountView;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataRetrievalFailureException;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {
  private TraderDao traderDao;
  private AccountDao accountDao;
  private PositionDao positionDao;
  private SecurityOrderDao securityOrderDao;
  private Field[] traderFields;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
      PositionDao positionDao, SecurityOrderDao securityDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.positionDao = positionDao;
    this.securityOrderDao = securityDao;
    traderFields = Trader.class.getDeclaredFields();
  }

  /**
   * Create a new trader and initialize a new account with 0 amount
   * - validate user input (all fields must be non empty)
   * - create a trader
   * - create an account
   * - create, setup, and return a new traderAccountView
   *
   * Assumption: to simplify the logic, each trader has only one account where traderId == accountId
   *
   * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
   * @return traderAccountView
   * @throws IllegalArgumentException if a trader has null fields or id is not null.
   */
  public TraderAccountView createTraderAndAccount(Trader trader){
    if(trader == null)
      throw new IllegalArgumentException("trader object passed is null.");
    Trader finalTrader = trader;
    Arrays.stream(traderFields).forEach(field -> {
      field.setAccessible(true);
      try {
        if (field.get(finalTrader) == null && field.getName() != "id") {
          throw new IllegalArgumentException("Found null field in trader object.");
        }
      } catch (IllegalAccessException e) {
        throw new DataRetrievalFailureException("could not perform null check on trader object");
      }
    });
    trader = traderDao.save(trader);
    Account account = new Account();
    account.setTrader_id(trader.getId());
    account.setAmount(0f);
    account = accountDao.save(account);
    return new TraderAccountView(trader,account);
  }

  /**
   * A trader can be deleted iff it has no open position and 0 cash balance
   * - validate traderID
   * - get trader account by traderId and check account balance
   * - get positions by accountId and check positions
   * - delete all securityOrders, account, trader (in this order)
   *
   * @param traderId must not be null
   * @throws IllegalArgumentException if tradeId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId){
    if(traderDao.existsById(traderId)){
      //taking advantage of accountID = traderID here
      if(accountDao.existsById(traderId) && accountDao.findById(traderId).get().getAmount() == 0){
        List<Position> positions = positionDao.findAllById(Arrays.asList(traderId));
        positions.stream().forEach(position -> {
          if(position.getPosition() != 0)
            throw new IllegalArgumentException("Trader has existing positions; unable to delete account.");
        });
        //if we get this far, we can safely delete the account
        securityOrderDao.deleteById(traderId);
        accountDao.deleteById(traderId);
        traderDao.deleteById(traderId);
      }
    } else {
      throw new IllegalArgumentException("Unable to delete trader account; either it does not exist or has nonzero balance.");
    }
  }

  /**
   * Withdraw a fund to an account by traderId
   *
   * - validate user input
   * - account = accountDao.findByTraderId
   * - accountDao.updateAmountById
   *
   * @param traderId trader ID
   * @param fund amount can't be 0
   * @return updated Account
   * @throws IllegalArgumentException if traderId is null or not found,
   *                                  fund is less or equal to 0, and insufficient fund
   */
  public Account withdraw(Integer traderId, Double fund){
    //validate inputs
    if (traderId == null || !traderDao.existsById(traderId))
      throw new IllegalArgumentException("null or non-existent traderId provided.");
    if (fund <= 0 || fund > accountDao.findById(traderId).get().getAmount())
      throw new IllegalArgumentException("invalid withdrawl amount.");

    Account account = accountDao.findById(traderId).get();
    Float balance = account.getAmount();
    account.setAmount(balance - fund.floatValue());
    return accountDao.updateAmountById(account);
  }

  public Account deposit(Integer traderId, Double fund){
    //validate inputs
    if (traderId == null || !traderDao.existsById(traderId))
      throw new IllegalArgumentException("null or non-existent traderId provided.");
    if (fund <= 0)
      throw new IllegalArgumentException("invalid deposit amount.");

    Account account = accountDao.findById(traderId).get();
    Float balance = account.getAmount();
    account.setAmount(balance + fund.floatValue());
    return accountDao.updateAmountById(account);
  }
}
